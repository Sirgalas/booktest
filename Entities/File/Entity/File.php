<?php

namespace app\Entities\File\Entity;

use Yii;
use yii\helpers\Inflector;
use yii\web\UploadedFile;

/**
 * This is the model class for table "file".
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $extension
 * @property string|null $path
 * @property string|null $size
 */
class File extends \yii\db\ActiveRecord
{
    public const PATH = 'files/%s';

    private $file;

    public static function create(UploadedFile $uploadedFile, string $url): self
    {
        $file = new static();
        $file->name = md5(Inflector::slug($uploadedFile->baseName));
        $file->extension = $uploadedFile->extension;
        $file->path =  sprintf(self::PATH, $url);
        $file->size = $uploadedFile->size;
        $file->file = $uploadedFile;
        return $file;
    }

    public function edit(UploadedFile $uploadedFile, string $url): void
    {

        $this->name = md5(Inflector::slug($uploadedFile->baseName));
        $this->extension = $uploadedFile->extension;
        $this->path =  sprintf(self::PATH, $url);
        $this->size = $uploadedFile->size;
    }

    public function getUrl($prefix = '/'): string
    {
        return $prefix . $this->path . '/' . $this->name . '.' . $this->extension;
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'file';
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'extension' => 'Extension',
            'path' => 'Path',
            'size' => 'Size',
        ];
    }

    public function beforeSave($insert)
    {
        $this->saveUploadedFile();

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function saveUploadedFile()
    {
        if (!$this->file || !$this->file instanceof UploadedFile) {
            return false;
        }
        if (file_exists($this->getFilePath())) {
            return null;
        }
        $pathArray = explode('/', $this->getFilePath());
        array_pop($pathArray);
        $path = implode('/', $pathArray);
        if (!is_dir($path)) {
            mkdir($path, 0777, true);
        }

        return $this->file->saveAs($this->getFilePath());
    }

    /**
     * @param array  $list - array вида ['home'=>600] - где home - расширение имени, 600 - размер (в общем то здесь
     *                     необязательный)
     * @param string $alias
     */
    public function deleteFiles($alias = '@webroot/')
    {
        $image = Yii::getAlias($alias . $this->path . '/' . $this->name . '.' . $this->extension);
        if (file_exists($image)) {
            unlink($image);
        }
        $this->delete();

    }

    public function getFilePath($sufix = null): string
    {
        if(!$sufix){
            return Yii::getAlias('@webroot') . DIRECTORY_SEPARATOR . $this->path . DIRECTORY_SEPARATOR . $this->name . '.' . $this->extension;
        }
        return Yii::getAlias('@webroot') . DIRECTORY_SEPARATOR . $this->path . DIRECTORY_SEPARATOR . $this->name.$sufix . '.' . $this->extension;
    }

}
